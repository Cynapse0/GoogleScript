function MasterUpdate(){
  //Browser.msgBox('Start')
  //Call UpdateSheetFunction
UpdateSheet(INSERTDESCRIPTOR,INSERTMYSQLDATABASENAME)
//Browser.msgBox('Finished')
}

function UpdateSheet(salias,sdb) {
//this function updates the following google sheets - TillDeclarations, StockReport, MonthlyFinance, DeletedTickets, Status+INSERTDESCRIPTOR

  var address = 'MySQL Server';
  var user = 'MySQL DB UserID';
  var userPwd = 'MySQL UserPassword';
  var db = sdb;
  var alias = salias
  var dbUrl = 'jdbc:mysql://' + address + '/' + db;
  var conn = Jdbc.getConnection(dbUrl, user, userPwd);
  var start = new Date();
  var stmt = conn.createStatement();
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var strsht = 'Payments' + alias
  var sheet = ss.getSheetByName(strsht)
  var qry = 'SELECT * FROM `Update` LIMIT 1'
  var cnt = stmt.executeQuery(qry);
  cnt.next()
  //find out if the database is currently being updated by the front end application
  var isupdating = cnt.getBoolean(2)
  cnt.close()
  if(!isupdating){
       ss.setActiveSheet(ss.getSheetByName('Status'+alias))
      ss.getSheetByName('Status'+alias).getRange(1, 2).setValue('Updating Raw Data Sets...');
  ss.getSheetByName('Status'+alias).getRange(2, 2).setValue('Fetching Payment Recordcount...');
   // Browser.msgBox(sheet.Name)
  if(!isupdating){sheet.getRange(3,1,50000,11).clearContent();}
  var r = FindNextEmptyRow('Payments'+alias,1,3)-1 ;
  var cell = sheet.getRange(r,1);
  if(cell.isBlank()){var id = 0;} else {
  var id = cell.getValue();
  }

  var qry = 'SELECT COUNT(ID) FROM `Payments` WHERE `ID` >'  + id

      var cnt = stmt.executeQuery(qry);
    cnt.next();
var counti = cnt.getInt(1);
  cnt.close();
    ss.getSheetByName('Status'+alias).getRange(2, 2).setValue('Fetching Payment Records... x'+counti);
  var qry = 'SELECT * FROM `Payments` WHERE `ID` >'  + id
  
      var results = stmt.executeQuery(qry);
        
      var cell = ss.getSheetByName('Payments'+alias).getRange(r+1,1);
      var numCols = results.getMetaData().getColumnCount();
      var row =0;
var arrayr = [];
    ss.getSheetByName('Status'+alias).getRange(2, 2).setValue('Reading Payment Records... x'+counti);
        while (results.next()) {
          arrayr[row] =[]
        var rowString = '';
        for (var col = 0; col < numCols; col++) 
        {
          arrayr[row][col] = results.getString(col + 1);
        }
        row++
       }
    ss.getSheetByName('Status'+alias).getRange(2, 2).setValue('Writing Payment Records... x'+counti);
  if(!row==0){
    ss.getSheetByName('Payments'+alias).getRange(r+1,1,row,numCols).setValues(arrayr)
  ss.getSheetByName('Payments'+alias).getRange(3,1,row+r-2,numCols).sort(4);
              };
ss.getSheetByName('Payments'+alias).hideSheet();
      results.close();
  
  
  
    var sheet = ss.getSheetByName('TillDecs'+alias);
    if(!isupdating){sheet.getRange(3,1,10000,14).clearContent();}
    ss.getSheetByName('TillDecs'+alias).getRange(3,1,FindNextEmptyRow('TillDecs'+alias,1,3)-1,14).sort(1);
  var r = FindNextEmptyRow('TillDecs'+alias,1,3) -1 ;
  var cell = sheet.getRange(r,1);
  var id = parseInt(cell.getValue());
  if(isNaN(id)){var id=0}
      ss.getSheetByName('Status'+alias).getRange(2, 2).setValue('Fetching Till Declaration Recordcount...');
  
    var qry = 'SELECT COUNT(ID) FROM `TillDeclarations` WHERE `ID` >'  + id
      var cnt = stmt.executeQuery(qry);
    cnt.next();
var counti = cnt.getInt(1);
  cnt.close();
    ss.getSheetByName('Status'+alias).getRange(2, 2).setValue('Fetching Till Declaration Records... x'+counti);  
  //Browser.msgBox(counti)
  var qry = 'SELECT * FROM `TillDeclarations` WHERE `ID` >'  + id
  var results = stmt.executeQuery(qry);
        var cell = ss.getSheetByName('TillDecs'+alias).getRange(r+1,1);
      var numCols = results.getMetaData().getColumnCount();
      var row =0;
var arrayrd = [];
    ss.getSheetByName('Status'+alias).getRange(2, 2).setValue('Reading Till Declaration Records... x'+counti);  
        while (results.next()) {
          arrayrd[row] =[]
        var rowString = '';
        for (var col = 0; col < numCols; col++) 
        {
          arrayrd[row][col] = results.getString(col + 1);

        }
        row++
       }
      ss.getSheetByName('Status'+alias).getRange(2, 2).setValue('Writing Till Declaration Records... x'+counti);  
  if(!row==0){
    sheet.getRange(r+1,1,row,numCols).setValues(arrayrd)
  sheet.getRange(3,1,row+r-2,numCols).sort(2);
              };
  results.close();
  
  
      var sheet = ss.getSheetByName('DeletedTickets'+alias);
    sheet.getRange(3,1,10000,6).clearContent()
  var r = 2 ;
  var cell = sheet.getRange(r,1);
  var id = 0;
      ss.getSheetByName('Status'+alias).getRange(2, 2).setValue('Fetching Deleted Tickets Recordcount...');
    var qry = 'SELECT COUNT(ID) FROM `DeletedTickets` WHERE `ID` >'  + id
      var cnt = stmt.executeQuery(qry);
    cnt.next();
var counti = cnt.getInt(1);
  cnt.close();
    ss.getSheetByName('Status'+alias).getRange(2, 2).setValue('Fetching Deleted Tickets Records... x'+counti);  
  var qry = 'SELECT * FROM `DeletedTickets` WHERE `ID` >'  + id
  var results = stmt.executeQuery(qry);
        var cell = sheet.getRange(r+1,1);
      var numCols = results.getMetaData().getColumnCount();
      var row =0;
var arrayrd = [];
    ss.getSheetByName('Status'+alias).getRange(2, 2).setValue('Reading Deleted Tickets Records... x'+counti);  
        while (results.next()) {
          arrayrd[row] =[]
        var rowString = '';
        for (var col = 0; col < numCols; col++) 
        {
          arrayrd[row][col] = results.getString(col + 1);

        }
        row++
       }
      ss.getSheetByName('Status'+alias).getRange(2, 2).setValue('Writing Deleted Tickets Records... x'+counti);  
  if(!row==0){sheet.getRange(r+1,1,row,numCols).setValues(arrayrd)};
  ss.getSheetByName('Status'+alias).getRange(21, 2).setValue(counti);  
  results.close();
  
  
  

      ss.getSheetByName('Status'+alias).getRange(2, 2).setValue('Updating Till Declaration Sheet...'); 
      //Call till differences algorrythm
CalcTillDiffsOpt(salias);
      var end = new Date();
    ss.getSheetByName('Status'+alias).getRange(1, 2).setValue('Updating Status Page...');
      ss.getSheetByName('Status'+alias).getRange(2, 2).setValue('Updating Status Page...');
  var artd = ss.getSheetByName('TillDecs'+alias).getRange(3,2,5,14).getValues()
  ss.getSheetByName('Status'+alias).getRange(15, 1,5,14).setValues(artd)
  ss.getSheetByName('Status'+alias).getRange(5,2).setValue(end)
    ss.getSheetByName('Status'+alias).getRange(7,2).setValue(artd[0][0])
    qry = "SELECT * FROM `Update` ORDER BY `ID` DESC LIMIT 1;"
    var cnt = stmt.executeQuery(qry);
    cnt.next()
    ss.getSheetByName('Status'+alias).getRange(4, 2).setValue(cnt.getString(3));
        stmt.close();
      conn.close();
cnt.close()  
StockReport(salias,sdb)
monthfinancials(salias)
      Logger.log('Time elapsed: %sms', end - start);
}
}
function isValidDate(value) {
    var dateWrapper = new Date(value);
    return !isNaN(dateWrapper.getDate());
}
function FindNextEmptyRow(strSheet,intColumn,lngStartRow) {
  var spr = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = (spr.getSheetByName(strSheet));
  var column = sheet.getRange(lngStartRow,intColumn,50000,1);
  var values = column.getValues(); // get all data in one call
  var ct = 0;
  while ( values[ct][0] != "" ) {
    ct++;
  }
  return (ct+lngStartRow);
}
  

function columnToLetter(column)
{
  var temp, letter = '';
  while (column > 0)
  {
    temp = (column - 1) % 26;
    letter = String.fromCharCode(temp + 65) + letter;
    column = (column - temp - 1) / 26;
  }
  return letter;
}












function CalcTillDiffsOpt(alias){
  if(alias==undefined){alias='ByfleetAlterations'};
 var ss = SpreadsheetApp.getActiveSpreadsheet();
 ss.setActiveSheet(ss.getSheetByName('Status'+alias));
 var td = ss.getSheetByName('TillDecs'+alias);
 var ps = ss.getSheetByName('Payments'+alias);

ps.hideSheet()
       var fnr = FindNextEmptyRow('TillDecs'+alias,1,3);
       var fnrp = FindNextEmptyRow('Payments'+alias,1,3);

 if(!(fnr==3)){
ss.getSheetByName('TillDecs'+alias).getRange(3,1,fnr-1,14).sort(2)
var tddata = td.getRange(1,1,fnr-1,8).getValues()
 ss.getSheetByName('Status'+alias).getRange(1, 2).setValue('Calculating Till Differences...')
 ss.getSheetByName('Status'+alias).getRange(2, 2).setValue('Copying Payment Data To Array...')
  var pay = ss.getSheetByName('Payments'+alias);
    var paydata = pay.getRange(1,1,fnrp-1,12).getValues()
  pay.hideSheet();
  ss.getSheetByName('Status'+alias).getRange(2, 2).setValue('Parsing Calculations...')
 var r = 3;
  var arrayr = [];

       
       var z = 3;

 while((r-1)<(fnr-1)){
   var sdatefin = tddata[r-1][2-1];
   if (r==3) {
     var sdatestart = new Date(0);
   } else {
   var sdatestart = tddata[r-1-1][2-1];
   }
   var rCash = 0;
   var rCheque = 0;
   var rToken = 0;
   var rCard = 0;
   var rVoucher = 0;
   //var z = 3;
   var drs = 100000;

   while(((z-1)<fnrp-1) && (paydata[z-1][4-1]<sdatefin)){
     if(paydata[z-1][4-1]==""){
       break; 
     }
     Logger.log(z-1);
     if(paydata[z-1][4-1]>sdatestart){
      var t = parseInt(paydata[z-1][5-1])

          if(t==1){
          rCash = rCash + parseFloat(paydata[z-1][6-1]) - parseFloat(paydata[z-1][7-1]);} else {
            if(t==2){rCheque = rCheque + parseFloat(paydata[z-1][6-1]) - parseFloat(paydata[z-1][7-1]);} else {
              if(t==3){rCard = rCard + parseFloat(paydata[z-1][6-1]) - parseFloat(paydata[z-1][7-1]);} else {
                if(t==4){rVoucher = rVoucher + parseFloat(paydata[z-1][6-1]) - parseFloat(paydata[z-1][7-1]);} else {
                  if(t==5){rToken = rToken + parseFloat(paydata[z-1][6-1]) - parseFloat(paydata[z-1][7-1]);}}}}}
       if(z<drs){drs=z;}
     }
     z++;
   }


   arrayr[r-3] = []
  
   arrayr[r-3][0] = Math.round((parseFloat(tddata[r-1][3-1]) - rCash)*100)/100;
   arrayr[r-3][1] = Math.round((parseFloat(tddata[r-1][4-1]) - rCheque)*100)/100;
   arrayr[r-3][2] = Math.round((parseFloat(tddata[r-1][5-1]) - rCard)*100)/100;
   arrayr[r-3][3] = Math.round((parseFloat(tddata[r-1][6-1]) - rVoucher)*100)/100;
   arrayr[r-3][4] = Math.round((parseFloat(tddata[r-1][7-1]) - rToken)*100)/100;
   var vT 
   vT = parseFloat(tddata[r-1][3-1])
   vT = vT + parseFloat(tddata[r-1][4-1])
   vT = vT + parseFloat(tddata[r-1][5-1])
   vT = vT + parseFloat(tddata[r-1][6-1])
   vT = vT + parseFloat(tddata[r-1][7-1])
   vT = vT - parseFloat(tddata[r-1][8-1])  
   if(!isNaN(parseFloat(tddata[r-2][8-1]))){vT = vT + parseFloat(tddata[r-2][8-1]) };
   
   arrayr[r-3][5] = Math.round((vT - rCash - rCheque - rCard - rVoucher - rToken)*100)/100;
   //this will prevent GoogleSheets max size overflow from halting the function
   if(drs!=100000){

   }
   r++;
 }

  z++
  var takings = 0
  var pluscash = 0

     if((z-1)!=(fnrp-1)){
       while((z-1)<fnrp-1){
        takings = takings + parseFloat(paydata[z-1][6-1]) - parseFloat(paydata[z-1][7-1])
        t = parseInt(paydata[z-1][5-1])
        if(t==1){pluscash = pluscash + parseFloat(paydata[z-1][6-1]) - parseFloat(paydata[z-1][7-1]);}
         z++
       }
     }

  takings = Math.round(takings*100)/100
  ss.getSheetByName('Status'+alias).getRange(8, 2).setValue(takings);
  var float = Math.round((parseFloat(tddata[r-2][7]))*100)/100;
  ss.getSheetByName('Status'+alias).getRange(9, 2).setValue(pluscash+float);
  
    ss.getSheetByName('Status'+alias).getRange(2, 2).setValue('Writing Values...');

  ss.getSheetByName('TillDecs'+alias).getRange(3,9,r-3,6).setValues(arrayr);
  ss.getSheetByName('TillDecs'+alias).getRange(3,1,r-3,14).sort({column: 2, ascending: false});
  
  
}
  
 ss.getSheetByName('Status'+alias).getRange(1, 2).setValue('None');
  ss.getSheetByName('Status'+alias).getRange(2, 2).setValue('Idle');
  
  td.showSheet()
}











function StockReport(alias,sdb){
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var stat = ss.getSheetByName('Status'+alias)
  ss.setActiveSheet(stat);
  var sheet = ss.getSheetByName('StockReport'+alias);
  var stat1 = stat.getRange(1, 2)
  var stat2 = stat.getRange(2, 2)
  var arrayrd = [];  
  var address = 'MySQL Server';
  var user = 'MySQL UserID';
  var userPwd = 'MySQL UserPW';
  var db = sdb;
  var dbUrl = 'jdbc:mysql://' + address + '/' + db;
  var conn = Jdbc.getConnection(dbUrl, user, userPwd);
  var start = new Date();
  var stmt = conn.createStatement();
  ss.getSheetByName('Status'+alias).getRange(1, 2).setValue("Generating Stock Report")
  ss.getSheetByName('Status'+alias).getRange(2, 2).setValue("Getting in stock items...")
  var qry = 'SELECT t.TicketID, t.LocationNo, t.CollectNo, Items.Description, Items.Quantity, t.Surname, Items.IssueDate, Items.Price, t.TicketTotal FROM Tickets t INNER JOIN Items ON t.TicketID = Items.TicketID WHERE t.IsCollected =0'
  var results = stmt.executeQuery(qry);
  var id = 0
  var stk = 0
  stat2.setValue("Reading results...")
        var numCols = results.getMetaData().getColumnCount();
      var row =0;
  sheet.getRange(3,1,10000,9).clearContent();
          while (results.next()) {
            if(!(parseInt(id)==parseInt(results.getString(1)))){
            arrayrd[row] =[]
        for (var col = 0; col < numCols; col++) 
        {
          arrayrd[row][col] = "";

        }
            row++;
          }

            id = parseInt(results.getString(1))
            
          arrayrd[row] =[]
        var rowString = '';
        stk = stk + parseFloat(results.getString(8))
        for (var col = 0; col < numCols; col++) 
        {
          arrayrd[row][col] = results.getString(col + 1);

        }
        row++

          
       }
  ss.getSheetByName('Status'+alias).getRange(2, 2).setValue("Writing Report...")
  if(!row==0){sheet.getRange(2,1,row,numCols).setValues(arrayrd)};
  results.close();
  stk = Math.round(stk*100)/100
  ss.getSheetByName('Status'+alias).getRange(22, 2).setValue(stk)
  ss.getSheetByName('Status'+alias).getRange(1, 2).setValue("None")
  ss.getSheetByName('Status'+alias).getRange(2, 2).setValue("Idle")
  
}
function monthfinancials(alias) {
   // if(alias==undefined){alias='ByfleetAlterations'};
var ss = SpreadsheetApp.getActiveSpreadsheet();
  ss.getSheetByName('Status'+alias).getRange(1, 2).setValue("Updating Monthly Financials...")
  ss.getSheetByName('Status'+alias).getRange(2, 2).setValue("Parsing Calculations...")
   
   ss.setActiveSheet(ss.getSheetByName('Status'+alias));
   var fnr = FindNextEmptyRow('TillDecs'+alias,1,3)

   var sheet = ss.getSheetByName('MonthlyFinancials'+alias);
   var td = ss.getSheetByName('TillDecs'+alias);
  ss.getSheetByName('MonthlyFinancials'+alias).getRange(3,1,10000,8).clearContent();
  if(fnr==3){fnr=5};
  var arraytd = td.getRange(3,1,fnr-3,8).getValues();

  var cyear = 0;
  var cmonth = 0;
  var months = [ "January", "February", "March", "April", "May", "June",
    "July", "August", "September", "October", "November", "December" ];
  var i = -1;
  var arraymf = [];
  if(!(fnr==5)){


  for (var z=0;z<(fnr-3);z++){
    var nyear = (arraytd[z][1]).getYear();

      var nmonth = (arraytd[z][1]).getMonth();
      //Proceding comments are testing artifacts
   //Browser.msgBox(z)
//Browser.msgBox((arraytd[z][1]).getYear())
    if(cyear==nyear && cmonth==nmonth){
      
          for(var r = 2;r<7;r++){
          arraymf[i][r] = parseFloat(arraytd[z][r]) + parseFloat(arraymf[i][r])
          arraymf[i][7] = parseFloat(arraymf[i][7]) +parseFloat(arraytd[z][r])
          }
      
    } else {
            i++
       arraymf[i] = [];
      arraymf[i][7] = 0
       for(var r = 2;r<7;r++){
           arraymf[i][r] = parseFloat(arraytd[z][r]);
         arraymf[i][7] = parseFloat(arraytd[z][r]) + parseFloat(arraymf[i][7])
          }
      //Browser.msgBox(nyear)
      arraymf[i][0] = nyear;
      arraymf[i][1] = months[nmonth];
      cyear=nyear
      cmonth=nmonth

    }
  }
  }
          
  if(!(i<0)){sheet.getRange(3,1,i+1,8).setValues(arraymf);};
   ss.getSheetByName('Status'+alias).getRange(1, 2).setValue("None")
  ss.getSheetByName('Status'+alias).getRange(2, 2).setValue("Idle")
}
